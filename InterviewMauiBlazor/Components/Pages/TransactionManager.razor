@page "/transactionmanager"

@using Syncfusion.Blazor.Calendars



@code {
    private List<TransactionDTO> DTOs { get; set; } = new List<TransactionDTO>();
    private List<ProductDTO> proDTOs => transactionServices.GetProducts();
    private List<OrderDTO> orderDTOs => transactionServices.GetOrders().Where(t => t.OrderDate == datePick).ToList();
    private TransactionDTO newDTO { get; set; } = new TransactionDTO();
    private TransactionDTO editDTO;
    private string SearchTerm { get; set; } = string.Empty;


    private DateTime datePick;

    private decimal ProductPrice = 0;

    private bool isAddingNewRow = false;

    private bool isEdit = false;

    protected override void OnInitialized()
    {
        DTOs = transactionServices.GetAll();
    }

    #region"search"
    private IEnumerable<TransactionDTO> FilteredTransactions => DTOs
        .Where(t => string.IsNullOrWhiteSpace(SearchTerm) ||
                    t.Product.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    t.Buyer.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    t.Seller.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    t.Status.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));

    private void OnInputEvent(ChangeEventArgs changeEvent)
    {
        SearchTerm = (string)changeEvent.Value;
    }
    #endregion     

    #region "events"


    private void SetDefalutValue()
    {
        datePick = DateTime.Now.Date;
        newDTO.Quantity = 0;
        newDTO.ProductId = proDTOs.FirstOrDefault().Id;
        newDTO.Seller = string.Empty;
        newDTO.Status = "UnKnow";
        newDTO.orderId = orderDTOs.Select(t => t.Id).FirstOrDefault();
        newDTO.Buyer = orderDTOs.Select(t => t.CustomerName).FirstOrDefault();
        newDTO.Time = datePick;
        ProductPrice = 0;
    }

    void ShowRow(int? id)
    {
        if (!isEdit && id.HasValue)
        {
            isEdit = true;
            editDTO = DTOs.FirstOrDefault(t => t.TransactionId == id);
            editDTO.TransactionId = id.Value;
            datePick = editDTO.Time;
            ProductPrice = editDTO.Product.Price;
        }
        else if (!isAddingNewRow){
            isAddingNewRow = true;
            SetDefalutValue();
            if (proDTOs != null && proDTOs.Any())
            {
                ProductPrice = proDTOs.FirstOrDefault().Price;
            }
        }       
    }

    void HideRow()
    {
        var newDTOs = transactionServices.GetAll();
        if (isEdit)
        {
            isEdit = false;
            editDTO = null;
        }
        else
        {
            isAddingNewRow = false;
            SetDefalutValue();
        }
        if (!newDTOs.SequenceEqual(DTOs))
        {
            DTOs = newDTOs;
            StateHasChanged();
        }
    }

    private void OnProductChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            if (isEdit)
            {
                editDTO.ProductId = id;
                ProductPrice = proDTOs.Where(t => t.Id == id).Select(t => t.Price).FirstOrDefault();
                editDTO.TotalPrice = editDTO.Quantity * ProductPrice;
                editDTO.Product = proDTOs.Find(t => t.Id.Equals(id));
            }
            newDTO.ProductId = id;
            ProductPrice = proDTOs.Where(t => t.Id == id).Select(t => t.Price).FirstOrDefault();
            newDTO.TotalPrice = newDTO.Quantity * ProductPrice;
            newDTO.Product = proDTOs.Find(t => t.Id.Equals(id));
        }
        else
        {
            ProductPrice = 0;
        }
    }

    private void OnOrderChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            if (isEdit)
            {
                editDTO.orderId = id;
                editDTO.Buyer = orderDTOs.Where(t => t.Id == id).Select(t => t.CustomerName).FirstOrDefault();
                editDTO.Order = orderDTOs.Find(t => t.Id.Equals(editDTO.orderId));
            }
            newDTO.orderId = id;
            newDTO.Buyer = orderDTOs.Where(t => t.Id == id).Select(t => t.CustomerName).FirstOrDefault();
            newDTO.Order = orderDTOs.Find(t => t.Id.Equals(newDTO.orderId));
        }
    }
    private void OnStatusChanged(ChangeEventArgs e)
    {
        var status = e.Value.ToString();
        if (!string.IsNullOrEmpty(status))
        {
            if (isEdit)
            {
                editDTO.Status = status;
            }
            newDTO.Status = status;
        }
        else
        {
            newDTO.Status = string.Empty;
        }

    }

    private void GetTotalPrice(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out decimal quanity))
        {
            if (isEdit)
            {
                editDTO.Quantity = (int)quanity;
                editDTO.TotalPrice = quanity * ProductPrice;
            }
            newDTO.Quantity = (int)quanity;
            newDTO.TotalPrice = quanity * ProductPrice;
        }
        else
        {
            newDTO.TotalPrice = 0;
        }
    }

    private async Task DateSet(ChangedEventArgs<DateTime> e)
    {       
        if (DateTime.TryParse(e.Value.ToString(), out DateTime date))
        {           
            datePick = date;
            if (orderDTOs.Count == 0 )
            {
                await JSRuntime.InvokeVoidAsync("showAlert", $"Have no Order in {date}");
            }
            if (isEdit)
            {
                editDTO.Time = date;
                editDTO.Status = date.Date >= DateTime.Now.AddDays(1).Date ? "PreOrder" : editDTO.Status;
                editDTO.orderId = orderDTOs.Select(t => t.Id).FirstOrDefault();
                editDTO.Order = orderDTOs.Find(t => t.Id.Equals(editDTO.orderId));
            }
            newDTO.Time = date;
            newDTO.Buyer = orderDTOs.Select(t => t.CustomerName).FirstOrDefault();
            newDTO.Status = date.Date >= DateTime.Now.AddDays(1).Date ? "PreOrder" : newDTO.Status;
            newDTO.orderId = orderDTOs.Select(t => t.Id).FirstOrDefault();
            newDTO.Order = orderDTOs.Find(t => t.Id.Equals(newDTO.orderId));

        }
        else
        {
            datePick = DateTime.Now.Date;
            newDTO.Buyer = orderDTOs.Select(t => t.CustomerName).FirstOrDefault();
        }        
    }
    #endregion

    #region "CRUD"
    async Task AddTransaction(TransactionDTO newTransaction)
    {
        if (newTransaction.Quantity <= 0)
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "Quantity must be greater than 0. Please re-enter.");
        }
        if (isEdit)
        {
            transactionServices.Update(newTransaction);
            HideRow();
        }
        else
        {
            transactionServices.Insert(newTransaction);
            SetDefalutValue();
        }
    }

    protected async Task DeleteTransaction(int id)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this transaction?");
        if (confirmDelete)
        {
            transactionServices.Delete(id);
            var newDTOs = transactionServices.GetAll();
            if (!newDTOs.SequenceEqual(DTOs))
            {
                DTOs = newDTOs;
                StateHasChanged(); 
            }
        }
    }
    #endregion    
}

<div class="search-bar">
    <input type="text" class="form-control" placeholder="Search..." @bind="SearchTerm" @oninput="OnInputEvent" />
</div>
<table class="table table-bordered table-striped table-hover mt-3" style="table-layout: fixed; width: 100%;">
    <thead class="table-dark">
        <tr>
            <th style="width: 10%;">Order</th>
            <th style="width: auto;">Product Name</th>
            <th style="width: 6%;">Quantity</th>
            <th style="width: 8%;">Total Price</th>
            <th style="width: auto;">Buyer</th>
            <th style="width: auto;">Seller</th>
            <th style="width: auto;">Time</th>
            <th style="width: auto;">Status</th>
            <th style="width: 15%;">Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (isAddingNewRow)
        {
            <tr>
                <td>
                    <select @onchange="OnOrderChanged" class="form-control-sm">
                        @foreach (var order in orderDTOs)
                        {
                            <option value="@order.Id" style="font-size: 0.8rem;">@order.CustomerName - @order.OrderDate</option>
                        }
                    </select>
                </td>
                <td>
                    <select @onchange="OnProductChanged" class="form-control-sm">
                        @foreach (var product in proDTOs)
                        {
                            <option value="@product.Id" style="font-size: 0.8rem;">@product.Name</option>
                        }
                    </select>
                </td>
                <td>
                    <input type="number" placeholder="@newDTO.Quantity" @oninput="GetTotalPrice" class="form-control" />
                </td>
                <td>
                    <input type="number" placeholder="@newDTO.TotalPrice" class="form-control" readonly />
                </td>
                <td>
                    <input type="text" placeholder="@newDTO.Buyer" class="form-control" />
                </td>
                <td>
                    <input type="text" @bind="newDTO.Seller" placeholder="Seller" class="form-control" />
                </td>
                <td>                   
                    <SfDatePicker TValue="DateTime" Format="dd-MM-yyyy" Value="@datePick">
                        <DatePickerEvents TValue="DateTime" ValueChange="DateSet"></DatePickerEvents>
                    </SfDatePicker>
                </td>
                <td>
                    <select @onchange="OnStatusChanged" value="UnKnow" class="form-control-sm">
                        @foreach (var status in new List<string> { "Completed", "Pending", datePick >= DateTime.Now.AddDays(1).Date ? "PreOrder" : "UnKnow"})
                        {
                            <option value="@status" style="font-size: 0.8rem;">@status</option>
                        }
                    </select>
                </td>
                <td>
                    <button class="btn btn-sm btn-success" @onclick="() => AddTransaction(newDTO)">Save</button>
                    <button class="btn btn-sm btn-secondary" @onclick="HideRow">Cancel</button>
                </td>
            </tr>
        }
        @if (isEdit)
        {
            <tr>
                <td>
                    <select @onchange="OnOrderChanged" value="@editDTO.Order.Id" class="form-control-sm">
                        @foreach (var order in orderDTOs)
                        {
                            <option value="@order.Id" style="font-size: 0.8rem;">@order.CustomerName - @order.OrderDate</option>
                        }
                    </select>
                </td>
                <td>
                    <select @onchange="OnProductChanged" value="@editDTO.Product.Id" class="form-control-sm">
                        @foreach (var product in proDTOs)
                        {
                            <option value="@product.Id" style="font-size: 0.8rem;">@product.Name</option>
                        }
                    </select>
                </td>
                <td>
                    <input type="number" @bind-value="@editDTO.Quantity" @oninput="GetTotalPrice" class="form-control" />
                </td>
                <td>
                    <input type="number" placeholder="@editDTO.TotalPrice" class="form-control" readonly />
                </td>
                <td>
                    <input type="text" placeholder="@editDTO.Buyer" class="form-control" readonly />
                </td>
                <td>
                    <input type="text" @bind="editDTO.Seller" placeholder="@editDTO.Seller" class="form-control" />
                </td>
                <td>
                    <SfDatePicker TValue="DateTime" Format="dd-MM-yyyy" Value="@editDTO.Time" Min='@(DTOs.Any() ? DTOs.Min(t => t.Order.OrderDate) : new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1))'>
                        <DatePickerEvents TValue="DateTime" ValueChange="DateSet"></DatePickerEvents>
                    </SfDatePicker>
                </td>
                <td>
                    <select @onchange="OnStatusChanged" value="@editDTO.Status" class="form-control-sm">
                        @foreach (var status in new string[] { "Completed", "Pending", editDTO.Time >= DateTime.Now.AddDays(1).Date ? "PreOrder" : "UnKnow" })
                        {
                            <option value="@status" style="font-size: 0.8rem;">@status</option>
                        }
                    </select>
                </td>
                <td>
                    <button class="btn btn-sm btn-success" @onclick="() => AddTransaction(editDTO)">Save</button>
                    <button class="btn btn-sm btn-secondary" @onclick="HideRow">Cancel</button>
                </td>
            </tr>
        }
        @if (FilteredTransactions != null && FilteredTransactions.Any())
        {
            @foreach (var transaction in FilteredTransactions)
            {
                <tr>
                    <td>@transaction.Order.Id</td>
                    <td>@transaction.Product.Name</td>
                    <td>@transaction.Quantity</td>
                    <td>@transaction.TotalPrice</td>
                    <td>@transaction.Buyer</td>
                    <td>@transaction.Seller</td>
                    <td>@transaction.Time.ToString("dd/MM/yyyy")</td>
                    <td>@transaction.Status</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() =>ShowRow(null)">
                            Add
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() =>ShowRow(transaction.TransactionId)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger"
                                @onclick="() => DeleteTransaction(transaction.TransactionId)">
                            Delete
                        </button>
                    </td>
                </tr>
                    
            }
        }
        else
        {
            <tr>
                <td colspan="8" class="text-center">No transactions available.</td>
            </tr>
        }
        
    </tbody>
</table>
